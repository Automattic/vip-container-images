name: Build Docker image
description: Builds a Docker image
inputs:
  context:
    description: The directory containing the Dockerfile
    required: true
  file:
    description: The Dockerfile to use
    required: false
  platforms:
    description: The platforms to build for
    required: false
    default: linux/amd64,linux/arm64
  push:
    description: Whether to push the image to the registry
    required: true
  primaryTag:
    description: The primary tag to use for the image
    required: true
  tags:
    description: The tags to use for the image
    required: false
  args:
    description: List of build-time variables
    required: false
  cache-from:
    description: List of external cache sources for buildx
    required: false
  cache-to:
    description: List of cache export destinations for buildx
    required: false
  no-cache:
    description: Do not use cache when building the image
    required: false
    default: 'false'
  registry:
    description: The registry to use
    required: false
    default: https://ghcr.io
  username:
    description: The username to use for the registry
    required: false
    default: ${{ github.actor }}
  password:
    description: The password to use for the registry
    required: false
    default: ${{ github.token }}
  auth_token:
    description: The token to authenticate with GitHub
    required: false
    default: ${{ github.token }}
  scan:
    description: Whether to scan the image
    required: false
    default: 'true'
runs:
  using: composite
  steps:
    - name: Set up Docker
      uses: docker/setup-docker-action@c2d73c1a11a9b44be6d855121d75c3e0dac814c1 # v4.2.0
      with:
        daemon-config: |
          {
            "features": {
              "containerd-snapshotter": true
            }
          }

    - name: Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

    - name: Log in to Docker Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Build and push container image
      uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6
      id: push
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        platforms: ${{ inputs.platforms }}
        outputs: |
          type=docker,rewrite-timestamp=true
          type=image,push=${{ inputs.push }},rewrite-timestamp=true
        tags: |
          ${{ inputs.primaryTag }}
          ${{ inputs.tags }}
        build-args: ${{ inputs.args }}
        cache-from: ${{ inputs.cache-from }}
        cache-to: ${{ inputs.cache-to }}
        no-cache: ${{ inputs.no-cache }}
      env:
        SOURCE_DATE_EPOCH: 0

    - name: Get image name
      shell: bash
      id: imagename
      run: echo "image_name=$(echo "${{ inputs.primaryTag }}" | cut -d ':' -f 1)" >> "${GITHUB_OUTPUT}"

    - name: Generate SBOM
      uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # v0.18.0
      with:
        image: ${{ inputs.primaryTag }}
        format: 'cyclonedx-json'
        output-file: 'sbom.cyclonedx.json'
      if: inputs.push == 'true'

    - name: Attest SBOM
      uses: actions/attest-sbom@115c3be05ff3974bcbd596578934b3f9ce39bf68 # v2.2.0
      with:
        subject-name: ${{ steps.imagename.outputs.image_name }}
        subject-digest: ${{ steps.push.outputs.digest }}
        sbom-path: 'sbom.cyclonedx.json'
        push-to-registry: true
      if: inputs.push == 'true'

    - name: Attest provenance
      uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2 # v2.2.3
      with:
        subject-name: ${{ steps.imagename.outputs.image_name }}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
      if: inputs.push == 'true'

    - name: Generate filename for SARIF
      shell: bash
      id: filename
      run: |
        echo "filename=trivy-$(basename "${{ inputs.primaryTag }}" | tr '\\/:' '-').sarif" >> "${GITHUB_OUTPUT}"

    - name: Get Docker socket
      id: socket
      run: echo docker_socket="$(docker context ls --format json | jq -r 'select(.Current == true) | .DockerEndpoint' | sed 's!^unix://!!')" >> "${GITHUB_OUTPUT}"
      shell: bash
      if: inputs.scan == 'true'

    - name: Security Scan
      shell: bash
      run: |
        docker run --rm \
          -v ${{ steps.socket.outputs.docker_socket }}:/var/run/docker.sock \
          -v $(pwd)/.cache:/root/.cache \
          -v $(pwd):/workdir \
          -w /workdir \
          aquasec/trivy:0.59.1 image --format json --ignore-unfixed --pkg-types os --scanners vuln --db-repository ghcr.io/aquasecurity/trivy-db:2,public.ecr.aws/aquasecurity/trivy-db:2 ${{ inputs.primaryTag }} --output trivy.json
        sudo chmod a+r -R .cache
      if: inputs.scan == 'true'

    - name: Print report
      uses: docker://aquasec/trivy:0.59.1
      with:
        args: convert --format=table trivy.json
      if: inputs.scan == 'true'

    - name: Generate SARIF
      uses: docker://aquasec/trivy:0.59.1
      with:
        args: convert --format=sarif --output=${{ steps.filename.outputs.filename }} trivy.json
      if: inputs.scan == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name)

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3.28.11
      with:
        sarif_file: ${{ steps.filename.outputs.filename }}
      if: inputs.scan == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name)
      continue-on-error: true

    - name: Prepare markdown report
      uses: docker://aquasec/trivy:0.59.1
      with:
        args: convert --format=template --template=@.github/actions/build-docker-image/markdown.tpl --output=trivy.md trivy.json
      if: inputs.scan == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name

    - name: Add marker to markdown report
      shell: bash
      run: echo "<!-- ${{ inputs.primaryTag }} -->" | sudo tee -a trivy.md
      if: inputs.scan == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name

    - name: Find Trivy Scan Report comment
      uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e # v3
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body-includes: ${{ inputs.primaryTag }}
      if: inputs.scan == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name

    - name: Create or update comment
      uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body-path: trivy.md
        edit-mode: replace
      if: inputs.scan == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name
