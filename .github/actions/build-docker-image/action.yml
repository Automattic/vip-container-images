name: Build Docker image
description: Builds a Docker image
inputs:
  context:
    description: The directory containing the Dockerfile
    required: true
  file:
    description: The Dockerfile to use
    required: false
  platforms:
    description: The platforms to build for
    required: false
    default: linux/amd64,linux/arm64
  push:
    description: Whether to push the image to the registry
    required: true
  primaryTag:
    description: The primary tag to use for the image
    required: true
  tags:
    description: The tags to use for the image
    required: false
  args:
    description: List of build-time variables
    required: false
  cache-from:
    description: List of external cache sources for buildx
    required: false
  cache-to:
    description: List of cache export destinations for buildx
    required: false
  no-cache:
    description: Do not use cache when building the image
    required: false
    default: 'false'
  registry:
    description: The registry to use
    required: false
    default: https://ghcr.io
  username:
    description: The username to use for the registry
    required: false
    default: ${{ github.actor }}
  password:
    description: The password to use for the registry
    required: false
    default: ${{ github.token }}
runs:
  using: composite
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
      if: ${{ inputs.push }}

    - name: Build and push container image
      uses: docker/build-push-action@v6
      id: push
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push }}
        sbom: true
        tags: |
          ${{ inputs.primaryTag }}
          ${{ inputs.tags }}
        build-args: ${{ inputs.args }}
        cache-from: ${{ inputs.cache-from }}
        cache-to: ${{ inputs.cache-to }}
        no-cache: ${{ inputs.no-cache }}

    - name: Get image name
      shell: bash
      id: imagename
      run: echo "image_name=$(echo "${{ inputs.primaryTag }}" | cut -d ':' -f 1)" >> "${GITHUB_OUTPUT}"

    - name: Generate SBOM
      uses: anchore/sbom-action@95b086ac308035dc0850b3853be5b7ab108236a8 # v0.16.1
      with:
        image: ${{ inputs.primaryTag }}
        format: 'cyclonedx-json'
        output-file: 'sbom.cyclonedx.json'
      if: inputs.push == 'true'

    - name: Attest SBOM
      uses: actions/attest-sbom@6d7733f629ce1368bd053e269afa8041a98a2b98 # v1.3.3
      with:
        subject-name: ${{ steps.imagename.outputs.image_name }}
        subject-digest: ${{ steps.push.outputs.digest }}
        sbom-path: 'sbom.cyclonedx.json'
        push-to-registry: true
      if: inputs.push == 'true'

    - name: Attest provenance
      uses: actions/attest-build-provenance@5e9cb68e95676991667494a6a4e59b8a2f13e1d0 # v1.3.3
      with:
        subject-name: ${{ steps.imagename.outputs.image_name }}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
      if: inputs.push == 'true'

    - name: Load image to local Docker
      uses: docker/build-push-action@v6
      with:
        load: true
        push: false
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        tags: |
          ${{ inputs.primaryTag }}
          ${{ inputs.tags }}
        build-args: ${{ inputs.args }}

    - name: Generate filename for SARIF
      shell: bash
      id: filename
      run: |
        echo "filename=trivy-$(basename "${{ inputs.primaryTag }}" | tr '\\/:' '-').sarif" >> "${GITHUB_OUTPUT}"

    - name: Security Scan
      uses: docker://aquasec/trivy:0.48.3
      with:
        args: image --format json --ignore-unfixed --vuln-type os ${{ inputs.primaryTag }} --output trivy.json

    - name: Print report
      uses: docker://aquasec/trivy:0.48.3
      with:
        args: convert --format=table trivy.json

    - name: Generate SARIF
      uses: docker://aquasec/trivy:0.48.3
      with:
        args: convert --format=sarif --output=${{ steps.filename.outputs.filename }} trivy.json
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3.25.11
      with:
        sarif_file: ${{ steps.filename.outputs.filename }}
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name
      continue-on-error: true

    - name: Prepare markdown report
      uses: docker://aquasec/trivy:0.48.3
      with:
        args: convert --format=template --template=@.github/actions/build-docker-image/markdown.tpl --output=trivy.md trivy.json
      if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name

    - name: Find Trivy Scan Report comment
      uses: peter-evans/find-comment@v3
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body-includes: ${{ inputs.primaryTag }}
      if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name

    - name: Create or update comment
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body-path: trivy.md
        edit-mode: replace
      if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name
